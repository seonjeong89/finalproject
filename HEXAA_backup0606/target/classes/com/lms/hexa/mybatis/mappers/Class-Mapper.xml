<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
    <mapper namespace="Class-Mapper">
    
  	<resultMap type="class" id="classMap">
  		<result property="classId" column="CLASS_ID" />
  		<result property="className" column="CLASS_NAME" />
  		<result property="classPrice" column="CLASS_PRICE" />
  		<result property="mngId" column="MNG_ID" />
  		<result property="classRoom" column="CLASS_ROOM" />
  	</resultMap>
  	
  	<resultMap type="class" id="belongMap">
  		<result property="classId" column="CLASS_ID" />
  		<result property="studentId" column="STUDENT_ID" />
  	</resultMap>
  	
  	<resultMap type="student" id="studentMap">
		<result property="id" column="student_id"/>
		<result property="pw" column="student_pw"/>
		<result property="name" column="STUDENT_NAME"/>
		<result property="genderCode" column="STUDENT_GENDER_CODE"/>
		<result property="email" column="STUDENT_EMAIL"/>
		<result property="zipCode" column="STUDENT_ZIP_CODE"/>
		<result property="address" column="STUDENT_ADDRESS"/>
		<result property="address2" column="STUDENT_ADDRESS2"/>
		<result property="studentPicture" column="STUDENT_STUDENT_PICTURE"/>
		<result property="birthDate" column="STUDENT_BIRTH_DATE"/>
		<result property="discountReason" column="STUDENT_DISCOUNT_REASON"/>
		<result property="discountRate" column="STUDENT_DISCOUNT_RATE"/>
		<result property="payDueDate" column="STUDENT_PAY_DUE_DATE"/>
		<result property="academyRegDate" column="STUDENT_ACADEMY_REG_DATE"/>
		<result property="stateCode" column="STUDENT_STATE_CODE"/>
		<result property="sibling" column="STUDENT_SIBLING"/>
		<result property="gradeCategoryCode" column="STUDENT_GRADE_CATEGORY_CODE"/>
		<result property="grade" column="STUDENT_GRADE"/>
		<result property="hp" column="STUDENT_HP"/>
		<result property="parentId" column="PARENT_ID"/>
		<result property="schoolNo" column="SCHOOL_NO"/>
	</resultMap>
  	 	
  	<select id="selectClassById" parameterType="str" resultType="class">
  		select CLASS_ID as classId,
  				CLASS_NAME as className,
  				CLASS_PRICE as classPrice,
  				MNG_ID as mngId,
  				CLASS_ROOM as classRoom
			from CLASS
			where CLASS_ID = #{classId}
  	</select>
  	
  	<select id="selectbelongById" parameterType="str" resultType="class">
  		select CLASS_ID as classId
  			from BELONG
			where STUDENT_ID = #{studentId}
  	</select>
  	
  	<select id="selectClassInfoByStudentId" parameterType="str" resultType="class">
  	
  		SELECT A.CLASS_ID AS classId
		      ,A.CLASS_NAME AS className
		      ,A.CLASS_PRICE AS classPrice
		      ,A.MNG_ID AS mngId
		      ,B.MNG_NAME AS mngName
		  FROM CLASS A, MANAGER B
		 WHERE CLASS_ID = (SELECT CLASS_ID
		                     FROM BELONG
		                    WHERE STUDENT_ID = #{value})
		   AND A.MNG_ID = B.MNG_ID
		   
  	</select>
  	
  	<select id="selectClassList" resultType="class">
  		SELECT A.CLASS_NAME as className,
		       B.MNG_NAME as mngName,
		       A.CLASS_ROOM as classRoom,
		       NVL(C.CNT,0) as studentId,
		       D.LROOM_MAXNO as lroomMaxNo,
		       A.CLASS_ID as classId,
		       A.CLASS_PRICE as classPrice,
		       A.MNG_ID as mngId
		  FROM CLASS A
          LEFT OUTER JOIN MANAGER B ON a.mng_id = B.MNG_ID
          LEFT OUTER JOIN LESSON_ROOM D ON A.CLASS_ROOM = D.LROOM_ID
          LEFT OUTER JOIN (SELECT CLASS_ID,
                                  COUNT(*) AS CNT
                             FROM BELONG
                            GROUP BY CLASS_ID) C ON A.CLASS_ID = C.CLASS_ID
          ORDER BY A.CLASS_ID DESC
  	</select>
  	
  	<select id="selectStudentByClass" parameterType="str" resultType="student">
  		SELECT C.STUDENT_ID AS id,
			   B.CLASS_NAME AS className,
			   E.SCHOOL_NAME AS schoolName,
		       C.STUDENT_NAME AS name,
		       D.MNG_NAME AS mngName,
		       C.STUDENT_GRADE_CATEGORY_CODE || ' ' || C.STUDENT_GRADE AS grade
		  FROM BELONG A, CLASS B, STUDENT C, MANAGER D, SCHOOL E
		 WHERE A.CLASS_ID = B.CLASS_ID
		   AND A.STUDENT_ID = C.STUDENT_ID
		   AND B.MNG_ID = D.MNG_ID
		   AND E.SCHOOL_ID = C.SCHOOL_NO
           AND B.CLASS_NAME = #{className}
         ORDER BY 2
  	</select>
  	
  	<select id="selectNotIncludeStudentByClass" parameterType="str" resultType="student">
  		SELECT A.STUDENT_ID AS id,
		       D.CLASS_NAME AS className,
		       C.SCHOOL_NAME AS schoolName,
		       A.STUDENT_NAME AS name,
		       E.MNG_NAME AS mngName,
		       A.STUDENT_GRADE_CATEGORY_CODE || ' ' || A.STUDENT_GRADE AS grade
		  FROM STUDENT A
		  LEFT OUTER JOIN BELONG B ON A.STUDENT_ID = B.STUDENT_ID
		  LEFT OUTER JOIN SCHOOL C ON A.SCHOOL_NO = C.SCHOOL_ID
		  LEFT OUTER JOIN CLASS D ON B.CLASS_ID = D.CLASS_ID
		  LEFT OUTER JOIN MANAGER E ON D.MNG_ID = E.MNG_ID
MINUS
  		SELECT C.STUDENT_ID AS id,
			   B.CLASS_NAME AS className,
			   E.SCHOOL_NAME AS schoolName,
		       C.STUDENT_NAME AS name,
		       D.MNG_NAME AS mngName,
		       C.STUDENT_GRADE_CATEGORY_CODE || ' ' || C.STUDENT_GRADE AS grade
		  FROM BELONG A, CLASS B, STUDENT C, MANAGER D, SCHOOL E
		 WHERE A.CLASS_ID = B.CLASS_ID
		   AND A.STUDENT_ID = C.STUDENT_ID
		   AND B.MNG_ID = D.MNG_ID
		   AND E.SCHOOL_ID = C.SCHOOL_NO
           AND B.CLASS_NAME = #{className}
         ORDER BY 2
  	</select>
  	
  	<delete id="deleteBelongOldInfo" parameterType="java.util.Map">
  		DELETE
		  FROM BELONG
		 WHERE CLASS_ID = #{classId}
		 <foreach collection="studentId" item="item" separator=" ">
		    OR STUDENT_ID = #{item}
		</foreach>
  		
  	</delete>
  	
  	<insert id="InsertNewBelongInfo" parameterType="java.util.Map">
		<foreach collection="studentId" item="item" separator=" " open="INSERT ALL" close="SELECT * FROM DUAL">
			INTO BELONG(STUDENT_ID, CLASS_ID)
			VALUES (#{item}, #{classId})
		</foreach>
	</insert>
	
	<select id="selectClassMaxClassId" resultType="int">
  		SELECT MAX(CLASS_ID)
  		  FROM CLASS
  	</select>
  	
  	<delete id="deleteBelongOldClassInfo" parameterType="java.util.Map">
  		DELETE
		  FROM BELONG
		 WHERE CLASS_ID IN (
		 <foreach collection="deletedClassId" item="item" separator=",">
		    #{item}
		</foreach>
  		)
  	</delete>
  	
  	<delete id="deleteClassTableAll">
  		DELETE
  		  FROM CLASS
  	</delete>
  	
  	
  	<insert id="insertNewClassInfo" parameterType="java.util.Map">
		<foreach collection="updatedClassInfo" item="item" separator=" " open="INSERT ALL" close="SELECT * FROM DUAL">
			INTO CLASS(CLASS_ID, CLASS_NAME, MNG_ID, CLASS_ROOM)
			VALUES (#{item.classId},#{item.className},#{item.mngId},#{item.classRoom})
		</foreach>
	</insert>
  	
  </mapper>
  
 

